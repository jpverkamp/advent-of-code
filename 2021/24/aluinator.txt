def f(z, i, divz, c1, c2):
    '''Take the previous z, the input value, and two constants.'''

    # mul x 0
    # add x z
    # mod x 26
    # div z 1 -- divz (either 1 or 26)
    # add x 10 -- c1
    # >> x = (z // divz) % 26 + c1

    # eql x w
    # eql x 0
    # >> x is 1 if x != i
    x_flag = (i == (z // divz) % 26 + c1)

    # mul y 0
    # add y 25
    # mul y x
    # >> because x is 0 or 1 if i == z % 26 + c1
    # >> y == 0 or 25 if i == z % 26 + c1

    # add y 1
    # mul z y
    # >> y == 1 or 26 if i == z % 26 + c1

    # so:
    # >> z *= 26 if i == z % 26 + c1
    # >> z *= 1 (nop) if i != z % 26 + c1
    if x_flag:
        z *= 26

    # mul y 0
    # add y w
    # add y 10 -- c2
    # mul y x
    # add z y
    if x_flag:
        z += i + c2

def f(z, i, divz, c1, c2):
    if (i == (z // divz) % 26 + c1):
        return z * 26 + i + c2

(?:.*\n){4}div z (1|26)\nadd x (-?\d+)\n(?:.*\n){9}add y (-?\d+)\n(?:.*\n){2}
$1, $2, $3\n

1	10	10
1	13	5
1	15	12
26	-12	12
1	14	6
26	-2	4
1	13	15
26	-12	3
1	15	7
1	11	11
26	-3	2
26	-13	12
26	-12	4
26	-13	11

each iteration, we're conditionally adding a base26 digit
    when divz = 1, we're keeping it
    when divz = 26, we're popping one, generating an equation

So:

1	10	10  i1+10
1	13	5   i1+10, i2+5
1	15	12  i1+10, i2+5, i3+12
26	-12	12  i4 = i3 + 12 - 12 = i3
1	14	6   i1+10, i2+5, i5+6
26	-2	4   i6 = i5 + 6 - 2 = i5 + 4
1	13	15  i1+10, i2+5, i7+15
26	-12	3   i8 = i7 + 15 - 12 = i7 + 3
1	15	7   i1+10, i2+5, i9+7
1	11	11  i1+10, i2+5, i9+7, i10+11
26	-3	2   i11 = i10 + 11 - 3 = i10 + 8
26	-13	12  i12 = i9 + 7 - 13 = i9 - 6
26	-12	4   i13 = i2 + 5 - 12 = i2 - 7
26	-13	11  i14 = i1 + 10 - 13 = i1 - 3

i4 = i3
i6 = i5 + 4
i8 = i7 + 3
i11 = i10 + 8
i12 = i9 - 6
i13 = i2 - 7
i14 = i1 - 3

---------11111
12345678901234
..99..........
..9959........
..995969......
..995969.19...
..9959699193..
.999596991932.
99995969919326

---------11111
12345678901234
..11..........
..1115........
..111514......
..111514.19...
..1115147191..
.811151471911.
48111514719111

